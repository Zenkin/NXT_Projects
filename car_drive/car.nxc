#define RAD_WHEEL 0.028
#define BASE 0.153
#define DEG2RAD PI/180
#define LEFT OUT_C
#define RIGHT OUT_B

int RIGHT_SENSOR, LEFT_SENSOR, R_DELTA, L_DELTA, DELTA, NEED_DIST;
int rotA, rotB, pwm_left, pwm_right;
int base_speed = 50;
float bearing, relative_bearing, path, prev_path = 0, deltha_path;
float x_coord = 0, y_coord = 0, azimuth, control,delta_x, delta_y;
float x_ref = 1, y_ref = 1;
float k = 20, error = 0.05;
bool FLAG = false;
int RIGHT_SENSOR, LEFT_SENSOR;

void ChekSensor(void);
void CheckRot(void);
void DistanceTraveled(void);
void LionInThePath(void);
void CoastIsClear(void);

task main(void) {
    int rotA, rotB, pwm_left, pwm_right;
    int base_speed = 50;
    float bearing, relative_bearing, path, prev_path = 0, deltha_path;
    float x_coord = 0, y_coord = 0, azimuth, control,delta_x, delta_y;
    float x_ref = 1, y_ref = 1;
    float k = 20, error = 0.05;
    Wait(50);

    while (true) {

        CheckSensor();
        CheckRot();
        DistanceTraveled();
          
        if (RIGHT_SENSOR < CRS) {
            FLAG = true;
            R_DELTA = abs(CRS - RIGHT_SENSOR);
        }

		if (LEFT_SENSOR < CLS) {
            FLAG = true;
            L_DELTA = abs(CLS - LEFT_SENSOR);
        }
          
        if (FLAG) LionInThePath();
        else CoastIsClear();
          
        FLAG = false;

        RIGHT_SENSOR = SensorUS(S1);
     	LEFT_SENSOR = SensorUS(S2);

    }

	while (true) {

        rotA = MotorRotationCount(LEFT);
        rotB = MotorRotationCount(RIGHT);

        path = (rotA+rotB)*DEG2RAD*RAD_WHEEL/2;
        bearing = (rotA-rotB)*DEG2RAD*RAD_WHEEL/BASE;

        deltha_path = path - prev_path;
        prev_path = path;

        x_coord = x_coord + deltha_path * cos(bearing);
        y_coord = y_coord + deltha_path * sin(bearing);
        delta_x = x_ref - x_coord;
        delta_y = y_ref - y_coord;

        azimuth = atan2(delta_y, delta_x);
        relative_bearing = azimuth - bearing;
        if (abs(relative_bearing) > PI) relative_bearing = relative_bearing - sign(relative_bearing) * 2 * PI;

        control = k * relative_bearing;
        pwm_left =  base_speed + control;
        pwm_right =  base_speed - control;
        if (abs(pwm_left) > 100) pwm_left = sign(pwm_left)*100;
        if (abs(pwm_right) > 100) pwm_right = sign(pwm_right)*100;
        OnFwd(LEFT, pwm_left);
        OnFwd(RIGHT, pwm_right);

        if((abs(x_ref - x_coord)<error)&(abs(y_ref - y_coord)<error)) break;
    }
}

void ChekSensor(void) {

     RIGHT_SENSOR = SensorUS(S1);
     LEFT_SENSOR = SensorUS(S2);

}

void CheckRot(void) {

     rotA = MotorRotationCount(LEFT);
     rotB = MotorRotationCount(RIGHT);
}

void DistanceTraveled(void) {

     path = (rotA+rotB)*DEG2RAD*RAD_WHEEL/2;
     
     deltha_path = path - prev_path;
     prev_path = path;
     
     x_coord = x_coord + deltha_path * cos(bearing);
     y_coord = y_coord + deltha_path * sin(bearing);
     
     delta_x = x_ref - x_coord;
     delta_y = y_ref - y_coord;
}

void LionInThePath(void) {

     DELTA = R_DELTA - L_DELTA;
     control = sign(DELTA) * (NEED_DIST - (RIGHT_SENSOR + LEFT_SENSOR)/4);
     pwm_right =  base_speed - control;
     pwm_left =  base_speed + control;
}

void CoastIsClear(void) {

     bearing = (rotA-rotB)*DEG2RAD*RAD_WHEEL/BASE;

     azimuth = atan2(delta_y, delta_x);
     
     relative_bearing = azimuth - bearing;

     if (abs(relative_bearing) > PI) relative_bearing = relative_bearing - sign(relative_bearing) * 2 * PI;
     
     control = k * relative_bearing ;
     
     pwm_left =  base_speed + control;
     pwm_right =  base_speed - control;
     
     if (abs(pwm_left) > 100) pwm_left = sign(pwm_left)*100;
     if (abs(pwm_right) > 100) pwm_right = sign(pwm_right)*100;
     
     OnFwd(LEFT, pwm_left);
     OnFwd(RIGHT, pwm_right);
}
